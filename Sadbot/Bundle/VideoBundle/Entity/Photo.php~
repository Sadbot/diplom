<?php

namespace Sadbot\Bundle\VideoBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;

use Gaufrette\Filesystem;
use Gaufrette\Adapter\Local as LocalAdapter;
use Symfony\Component\Filesystem\Filesystem as FS;

use Symfony\Component\HttpFoundation\File\UploadedFile;

/**
 * Photo
 *
 * @ORM\Table(name="photo", indexes={@ORM\Index(name="photo_author_idx", columns={"author"}), @ORM\Index(name="photo_category_idx", columns={"photo_category"})})
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks
 * @ORM\Entity(repositoryClass="Sadbot\Bundle\VideoBundle\Entity\PhotoRepository")
 */
class Photo
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="title", type="string", length=255, nullable=false)
     */
    private $title;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text", nullable=false)
     */
    private $description;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="created_at", type="datetime", nullable=false)
     */
    private $createdAt;

    /**
     * @var boolean
     *
     * @ORM\Column(name="status", type="boolean", nullable=false)
     */
    private $status;

    /**
     * @var boolean
     *
     * @ORM\Column(name="hash", type="string", length=255, nullable=false)
     */
    private $hash;

    /**
     * @var string
     *
     * @ORM\Column(name="file_storage_path", type="string", length=255, nullable=false)
     */
    private $file_storage_path;

    /**
     * @var string
     *
     * @ORM\Column(name="file_name", type="string", length=255, nullable=false)
     */
    private $file_name;

    /**
     * @var string
     *
     * @ORM\Column(name="file_mime_type", type="string", length=255, nullable=false)
     */
    private $file_mime_type;

    /**
     * @var string
     *
     * @ORM\Column(name="file_size", type="integer")
     */
    private $file_size;

    /**
     * @var string
     * @Assert\File(
     *      maxSize = "5M",
     *      maxSizeMessage = "Слишком большой файл",
     *      mimeTypes = {"image/jpeg", "image/gif", "image/png", "image/tiff"},
     *      mimeTypesMessage = "Только файловые типы изображения могут быть загружены."
     * )
     */
    private $file;

    /**
     * @var \User
     *
     * @ORM\ManyToOne(targetEntity="\Sadbot\Bundle\UserBundle\Entity\User")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="author", referencedColumnName="id")
     * })
     */
    private $author;

    /**
     * @var \PhotoCategory
     *
     * @ORM\ManyToOne(targetEntity="PhotoCategory")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="photo_category", referencedColumnName="id")
     * })
     */
    private $photoCategory;

    public function __construct()
    {
        $this->createdAt = new \DateTime;
        $this->encoded = false;
    }

    public function getAbsolutePath()
    {
        return null === $this->path
            ? null
            : $this->getFileStoragePath().$this->getFileName().'.'.$this->getFile()->guessExtension();
    }

    public function getWebPath()
    {
        return null === $this->path
            ? null
            : $this->path.'/'.$this->getFileName().'.'.$this->getFile()->guessExtension($this->getFileMimeType());
    }

    protected function getUploadRootDir()
    {
        return '/var/photos';
    }

    /**
     * Sets file.
     *
     * @param UploadedFile $file
     */
    public function setFile(UploadedFile $file = null)
    {
        $this->file = $file;
    }

    /**
     * Get file.
     *
     * @return UploadedFile
     */
    public function getFile()
    {
        $file = new File($this->getAbsolutePath());

        return $file;
    }

    /**
     * @ORM\PrePersist()
     */
    public function preUpload()
    {
        if (null === $this->getFile())
        {
            return;
        }

        $this->filename = sha1(uniqid(mt_rand(), true));
        $this->hash = md5($this->path.$this->filename);
        $this->path = $this->getUploadRootDir().$this->hash;

        $fs = new FS();
        $fs->mkdir($this->path);
    }

    /**
     * Called before entity removal
     *
     * @ORM\PreRemove()
     */
    public function removeUpload()
    {
        if ($file = $this->getAbsolutePath()) {
            unlink($file);
        }
    }

    /**
     * @ORM\PostPersist()
     */
    public function upload()
    {
        if (null === $this->getFile()) {
            return;
        }

        $adapter = new LocalAdapter($this->getUploadDir());
        $fs = new Filesystem($adapter);

        $fs->write($this->path, $this->file);

        $this->file = null;
    }

}
